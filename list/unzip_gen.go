// Code generated by generate_zip.pl; DO NOT EDIT.

package list

import (
	"github.com/shogo82148/hi/tuple"
)

// Unzip2 converts a list of 2-tuple to lists of each elements.
func Unzip2[T1, T2 any](l *List[tuple.Tuple2[T1, T2]]) (*List[T1], *List[T2]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
	}
	return l1, l2
}

// Unzip3 converts a list of 3-tuple to lists of each elements.
func Unzip3[T1, T2, T3 any](l *List[tuple.Tuple3[T1, T2, T3]]) (*List[T1], *List[T2], *List[T3]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
	}
	return l1, l2, l3
}

// Unzip4 converts a list of 4-tuple to lists of each elements.
func Unzip4[T1, T2, T3, T4 any](l *List[tuple.Tuple4[T1, T2, T3, T4]]) (*List[T1], *List[T2], *List[T3], *List[T4]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
	}
	return l1, l2, l3, l4
}

// Unzip5 converts a list of 5-tuple to lists of each elements.
func Unzip5[T1, T2, T3, T4, T5 any](l *List[tuple.Tuple5[T1, T2, T3, T4, T5]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
	}
	return l1, l2, l3, l4, l5
}

// Unzip6 converts a list of 6-tuple to lists of each elements.
func Unzip6[T1, T2, T3, T4, T5, T6 any](l *List[tuple.Tuple6[T1, T2, T3, T4, T5, T6]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
	}
	return l1, l2, l3, l4, l5, l6
}

// Unzip7 converts a list of 7-tuple to lists of each elements.
func Unzip7[T1, T2, T3, T4, T5, T6, T7 any](l *List[tuple.Tuple7[T1, T2, T3, T4, T5, T6, T7]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
	}
	return l1, l2, l3, l4, l5, l6, l7
}

// Unzip8 converts a list of 8-tuple to lists of each elements.
func Unzip8[T1, T2, T3, T4, T5, T6, T7, T8 any](l *List[tuple.Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8
}

// Unzip9 converts a list of 9-tuple to lists of each elements.
func Unzip9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](l *List[tuple.Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9
}

// Unzip10 converts a list of 10-tuple to lists of each elements.
func Unzip10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](l *List[tuple.Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10
}

// Unzip11 converts a list of 11-tuple to lists of each elements.
func Unzip11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](l *List[tuple.Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11
}

// Unzip12 converts a list of 12-tuple to lists of each elements.
func Unzip12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](l *List[tuple.Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11], *List[T12]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	l12 := new(List[T12]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
		l12.PushBack(e.Value.V12)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12
}

// Unzip13 converts a list of 13-tuple to lists of each elements.
func Unzip13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](l *List[tuple.Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11], *List[T12], *List[T13]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	l12 := new(List[T12]).Init()
	l13 := new(List[T13]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
		l12.PushBack(e.Value.V12)
		l13.PushBack(e.Value.V13)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13
}

// Unzip14 converts a list of 14-tuple to lists of each elements.
func Unzip14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](l *List[tuple.Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11], *List[T12], *List[T13], *List[T14]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	l12 := new(List[T12]).Init()
	l13 := new(List[T13]).Init()
	l14 := new(List[T14]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
		l12.PushBack(e.Value.V12)
		l13.PushBack(e.Value.V13)
		l14.PushBack(e.Value.V14)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14
}

// Unzip15 converts a list of 15-tuple to lists of each elements.
func Unzip15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](l *List[tuple.Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11], *List[T12], *List[T13], *List[T14], *List[T15]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	l12 := new(List[T12]).Init()
	l13 := new(List[T13]).Init()
	l14 := new(List[T14]).Init()
	l15 := new(List[T15]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
		l12.PushBack(e.Value.V12)
		l13.PushBack(e.Value.V13)
		l14.PushBack(e.Value.V14)
		l15.PushBack(e.Value.V15)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15
}

// Unzip16 converts a list of 16-tuple to lists of each elements.
func Unzip16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](l *List[tuple.Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]]) (*List[T1], *List[T2], *List[T3], *List[T4], *List[T5], *List[T6], *List[T7], *List[T8], *List[T9], *List[T10], *List[T11], *List[T12], *List[T13], *List[T14], *List[T15], *List[T16]) {
	l1 := new(List[T1]).Init()
	l2 := new(List[T2]).Init()
	l3 := new(List[T3]).Init()
	l4 := new(List[T4]).Init()
	l5 := new(List[T5]).Init()
	l6 := new(List[T6]).Init()
	l7 := new(List[T7]).Init()
	l8 := new(List[T8]).Init()
	l9 := new(List[T9]).Init()
	l10 := new(List[T10]).Init()
	l11 := new(List[T11]).Init()
	l12 := new(List[T12]).Init()
	l13 := new(List[T13]).Init()
	l14 := new(List[T14]).Init()
	l15 := new(List[T15]).Init()
	l16 := new(List[T16]).Init()
	for e := l.Front(); e != nil; e = e.Next() {
		l1.PushBack(e.Value.V1)
		l2.PushBack(e.Value.V2)
		l3.PushBack(e.Value.V3)
		l4.PushBack(e.Value.V4)
		l5.PushBack(e.Value.V5)
		l6.PushBack(e.Value.V6)
		l7.PushBack(e.Value.V7)
		l8.PushBack(e.Value.V8)
		l9.PushBack(e.Value.V9)
		l10.PushBack(e.Value.V10)
		l11.PushBack(e.Value.V11)
		l12.PushBack(e.Value.V12)
		l13.PushBack(e.Value.V13)
		l14.PushBack(e.Value.V14)
		l15.PushBack(e.Value.V15)
		l16.PushBack(e.Value.V16)
	}
	return l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16
}
