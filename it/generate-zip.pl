#!/usr/bin/env perl

use v5.36.0;
use warnings;

open my $fh, ">", "zip_gen.go" or die "failed to open: $!";

print $fh <<'END';
// Code generated by generate_zip.pl; DO NOT EDIT.

//go:build goexperiment.rangefunc

package it

import (
    "iter"

    "github.com/shogo82148/hi/tuple"
)
END

for my $n(2..16) {
    say $fh "";
    my $types = join ", ", map { "T$_" } 1..$n;
    my $slice_args = join ", ", map { "s$_ iter.Seq[T$_]" } 1..$n;
    my $values = join ", ", map { "v$_" } 1..$n;
    say $fh "// Zip$n returns an iterator of $n-tuples.";
    say $fh "// The returned iterator have the length of the shortest iterator.";
    say $fh "func Zip${n}[$types any]($slice_args) func(func(tuple.Tuple${n}[$types]) bool) {";
    say $fh "return func(yield func(tuple.Tuple${n}[$types]) bool) {";
    for my $i(1..$n) {
        say $fh "next$i, stop$i := iter.Pull(s$i)";
        say $fh "defer stop$i()";
    }
    say $fh "for {";
    for my $i(1..$n) {
        say $fh "v$i, ok := next$i()";
        say $fh "if !ok { return }";
    }
    say $fh "if !yield(tuple.New$n($values)) { return }";
    say $fh "}";

    say $fh "}";
    say $fh "}";
}

system("gofmt -s -w zip_gen.go");

close($fh);
