// Code generated by generate-unzip.pl; DO NOT EDIT.

//go:build goexperiment.rangefunc

package it

import (
	"iter"

	"github.com/shogo82148/hi/tuple"
)

// Unzip2 converts an iterator of 2-tuple to iterators of each elements.
func Unzip2[T1, T2 any](seq iter.Seq[tuple.Tuple2[T1, T2]]) (func(func(T1) bool), func(func(T2) bool)) {
	s := Tee(seq, 2)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		}
}

// Unzip3 converts an iterator of 3-tuple to iterators of each elements.
func Unzip3[T1, T2, T3 any](seq iter.Seq[tuple.Tuple3[T1, T2, T3]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool)) {
	s := Tee(seq, 3)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		}
}

// Unzip4 converts an iterator of 4-tuple to iterators of each elements.
func Unzip4[T1, T2, T3, T4 any](seq iter.Seq[tuple.Tuple4[T1, T2, T3, T4]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool)) {
	s := Tee(seq, 4)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		}
}

// Unzip5 converts an iterator of 5-tuple to iterators of each elements.
func Unzip5[T1, T2, T3, T4, T5 any](seq iter.Seq[tuple.Tuple5[T1, T2, T3, T4, T5]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool)) {
	s := Tee(seq, 5)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		}
}

// Unzip6 converts an iterator of 6-tuple to iterators of each elements.
func Unzip6[T1, T2, T3, T4, T5, T6 any](seq iter.Seq[tuple.Tuple6[T1, T2, T3, T4, T5, T6]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool)) {
	s := Tee(seq, 6)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		}
}

// Unzip7 converts an iterator of 7-tuple to iterators of each elements.
func Unzip7[T1, T2, T3, T4, T5, T6, T7 any](seq iter.Seq[tuple.Tuple7[T1, T2, T3, T4, T5, T6, T7]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool)) {
	s := Tee(seq, 7)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		}
}

// Unzip8 converts an iterator of 8-tuple to iterators of each elements.
func Unzip8[T1, T2, T3, T4, T5, T6, T7, T8 any](seq iter.Seq[tuple.Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool)) {
	s := Tee(seq, 8)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		}
}

// Unzip9 converts an iterator of 9-tuple to iterators of each elements.
func Unzip9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](seq iter.Seq[tuple.Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool)) {
	s := Tee(seq, 9)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		}
}

// Unzip10 converts an iterator of 10-tuple to iterators of each elements.
func Unzip10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](seq iter.Seq[tuple.Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool)) {
	s := Tee(seq, 10)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		}
}

// Unzip11 converts an iterator of 11-tuple to iterators of each elements.
func Unzip11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](seq iter.Seq[tuple.Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool)) {
	s := Tee(seq, 11)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		}
}

// Unzip12 converts an iterator of 12-tuple to iterators of each elements.
func Unzip12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](seq iter.Seq[tuple.Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool), func(func(T12) bool)) {
	s := Tee(seq, 12)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		},
		func(yield func(T12) bool) {
			for v := range s[11] {
				if !yield(v.V12) {
					return
				}
			}
		}
}

// Unzip13 converts an iterator of 13-tuple to iterators of each elements.
func Unzip13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](seq iter.Seq[tuple.Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool), func(func(T12) bool), func(func(T13) bool)) {
	s := Tee(seq, 13)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		},
		func(yield func(T12) bool) {
			for v := range s[11] {
				if !yield(v.V12) {
					return
				}
			}
		},
		func(yield func(T13) bool) {
			for v := range s[12] {
				if !yield(v.V13) {
					return
				}
			}
		}
}

// Unzip14 converts an iterator of 14-tuple to iterators of each elements.
func Unzip14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](seq iter.Seq[tuple.Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool), func(func(T12) bool), func(func(T13) bool), func(func(T14) bool)) {
	s := Tee(seq, 14)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		},
		func(yield func(T12) bool) {
			for v := range s[11] {
				if !yield(v.V12) {
					return
				}
			}
		},
		func(yield func(T13) bool) {
			for v := range s[12] {
				if !yield(v.V13) {
					return
				}
			}
		},
		func(yield func(T14) bool) {
			for v := range s[13] {
				if !yield(v.V14) {
					return
				}
			}
		}
}

// Unzip15 converts an iterator of 15-tuple to iterators of each elements.
func Unzip15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](seq iter.Seq[tuple.Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool), func(func(T12) bool), func(func(T13) bool), func(func(T14) bool), func(func(T15) bool)) {
	s := Tee(seq, 15)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		},
		func(yield func(T12) bool) {
			for v := range s[11] {
				if !yield(v.V12) {
					return
				}
			}
		},
		func(yield func(T13) bool) {
			for v := range s[12] {
				if !yield(v.V13) {
					return
				}
			}
		},
		func(yield func(T14) bool) {
			for v := range s[13] {
				if !yield(v.V14) {
					return
				}
			}
		},
		func(yield func(T15) bool) {
			for v := range s[14] {
				if !yield(v.V15) {
					return
				}
			}
		}
}

// Unzip16 converts an iterator of 16-tuple to iterators of each elements.
func Unzip16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](seq iter.Seq[tuple.Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]]) (func(func(T1) bool), func(func(T2) bool), func(func(T3) bool), func(func(T4) bool), func(func(T5) bool), func(func(T6) bool), func(func(T7) bool), func(func(T8) bool), func(func(T9) bool), func(func(T10) bool), func(func(T11) bool), func(func(T12) bool), func(func(T13) bool), func(func(T14) bool), func(func(T15) bool), func(func(T16) bool)) {
	s := Tee(seq, 16)
	return func(yield func(T1) bool) {
			for v := range s[0] {
				if !yield(v.V1) {
					return
				}
			}
		},
		func(yield func(T2) bool) {
			for v := range s[1] {
				if !yield(v.V2) {
					return
				}
			}
		},
		func(yield func(T3) bool) {
			for v := range s[2] {
				if !yield(v.V3) {
					return
				}
			}
		},
		func(yield func(T4) bool) {
			for v := range s[3] {
				if !yield(v.V4) {
					return
				}
			}
		},
		func(yield func(T5) bool) {
			for v := range s[4] {
				if !yield(v.V5) {
					return
				}
			}
		},
		func(yield func(T6) bool) {
			for v := range s[5] {
				if !yield(v.V6) {
					return
				}
			}
		},
		func(yield func(T7) bool) {
			for v := range s[6] {
				if !yield(v.V7) {
					return
				}
			}
		},
		func(yield func(T8) bool) {
			for v := range s[7] {
				if !yield(v.V8) {
					return
				}
			}
		},
		func(yield func(T9) bool) {
			for v := range s[8] {
				if !yield(v.V9) {
					return
				}
			}
		},
		func(yield func(T10) bool) {
			for v := range s[9] {
				if !yield(v.V10) {
					return
				}
			}
		},
		func(yield func(T11) bool) {
			for v := range s[10] {
				if !yield(v.V11) {
					return
				}
			}
		},
		func(yield func(T12) bool) {
			for v := range s[11] {
				if !yield(v.V12) {
					return
				}
			}
		},
		func(yield func(T13) bool) {
			for v := range s[12] {
				if !yield(v.V13) {
					return
				}
			}
		},
		func(yield func(T14) bool) {
			for v := range s[13] {
				if !yield(v.V14) {
					return
				}
			}
		},
		func(yield func(T15) bool) {
			for v := range s[14] {
				if !yield(v.V15) {
					return
				}
			}
		},
		func(yield func(T16) bool) {
			for v := range s[15] {
				if !yield(v.V16) {
					return
				}
			}
		}
}
