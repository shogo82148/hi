// Code generated by generate_zip.pl; DO NOT EDIT.

//go:build goexperiment.rangefunc

package it

import (
	"iter"

	"github.com/shogo82148/hi/tuple"
)

// Zip2 returns an iterator of 2-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip2[T1, T2 any](s1 iter.Seq[T1], s2 iter.Seq[T2]) func(func(tuple.Tuple2[T1, T2]) bool) {
	return func(yield func(tuple.Tuple2[T1, T2]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			if !yield(tuple.New2(v1, v2)) {
				return
			}
		}
	}
}

// Zip3 returns an iterator of 3-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip3[T1, T2, T3 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3]) func(func(tuple.Tuple3[T1, T2, T3]) bool) {
	return func(yield func(tuple.Tuple3[T1, T2, T3]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			if !yield(tuple.New3(v1, v2, v3)) {
				return
			}
		}
	}
}

// Zip4 returns an iterator of 4-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip4[T1, T2, T3, T4 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4]) func(func(tuple.Tuple4[T1, T2, T3, T4]) bool) {
	return func(yield func(tuple.Tuple4[T1, T2, T3, T4]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			if !yield(tuple.New4(v1, v2, v3, v4)) {
				return
			}
		}
	}
}

// Zip5 returns an iterator of 5-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip5[T1, T2, T3, T4, T5 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5]) func(func(tuple.Tuple5[T1, T2, T3, T4, T5]) bool) {
	return func(yield func(tuple.Tuple5[T1, T2, T3, T4, T5]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			if !yield(tuple.New5(v1, v2, v3, v4, v5)) {
				return
			}
		}
	}
}

// Zip6 returns an iterator of 6-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip6[T1, T2, T3, T4, T5, T6 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6]) func(func(tuple.Tuple6[T1, T2, T3, T4, T5, T6]) bool) {
	return func(yield func(tuple.Tuple6[T1, T2, T3, T4, T5, T6]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			if !yield(tuple.New6(v1, v2, v3, v4, v5, v6)) {
				return
			}
		}
	}
}

// Zip7 returns an iterator of 7-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip7[T1, T2, T3, T4, T5, T6, T7 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7]) func(func(tuple.Tuple7[T1, T2, T3, T4, T5, T6, T7]) bool) {
	return func(yield func(tuple.Tuple7[T1, T2, T3, T4, T5, T6, T7]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			if !yield(tuple.New7(v1, v2, v3, v4, v5, v6, v7)) {
				return
			}
		}
	}
}

// Zip8 returns an iterator of 8-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip8[T1, T2, T3, T4, T5, T6, T7, T8 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8]) func(func(tuple.Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) bool) {
	return func(yield func(tuple.Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			if !yield(tuple.New8(v1, v2, v3, v4, v5, v6, v7, v8)) {
				return
			}
		}
	}
}

// Zip9 returns an iterator of 9-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9]) func(func(tuple.Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) bool) {
	return func(yield func(tuple.Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			if !yield(tuple.New9(v1, v2, v3, v4, v5, v6, v7, v8, v9)) {
				return
			}
		}
	}
}

// Zip10 returns an iterator of 10-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10]) func(func(tuple.Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) bool) {
	return func(yield func(tuple.Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			if !yield(tuple.New10(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)) {
				return
			}
		}
	}
}

// Zip11 returns an iterator of 11-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11]) func(func(tuple.Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) bool) {
	return func(yield func(tuple.Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			if !yield(tuple.New11(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)) {
				return
			}
		}
	}
}

// Zip12 returns an iterator of 12-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11], s12 iter.Seq[T12]) func(func(tuple.Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) bool) {
	return func(yield func(tuple.Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		next12, stop12 := iter.Pull(s12)
		defer stop12()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			v12, ok := next12()
			if !ok {
				return
			}
			if !yield(tuple.New12(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)) {
				return
			}
		}
	}
}

// Zip13 returns an iterator of 13-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11], s12 iter.Seq[T12], s13 iter.Seq[T13]) func(func(tuple.Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) bool) {
	return func(yield func(tuple.Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		next12, stop12 := iter.Pull(s12)
		defer stop12()
		next13, stop13 := iter.Pull(s13)
		defer stop13()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			v12, ok := next12()
			if !ok {
				return
			}
			v13, ok := next13()
			if !ok {
				return
			}
			if !yield(tuple.New13(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)) {
				return
			}
		}
	}
}

// Zip14 returns an iterator of 14-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11], s12 iter.Seq[T12], s13 iter.Seq[T13], s14 iter.Seq[T14]) func(func(tuple.Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) bool) {
	return func(yield func(tuple.Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		next12, stop12 := iter.Pull(s12)
		defer stop12()
		next13, stop13 := iter.Pull(s13)
		defer stop13()
		next14, stop14 := iter.Pull(s14)
		defer stop14()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			v12, ok := next12()
			if !ok {
				return
			}
			v13, ok := next13()
			if !ok {
				return
			}
			v14, ok := next14()
			if !ok {
				return
			}
			if !yield(tuple.New14(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)) {
				return
			}
		}
	}
}

// Zip15 returns an iterator of 15-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11], s12 iter.Seq[T12], s13 iter.Seq[T13], s14 iter.Seq[T14], s15 iter.Seq[T15]) func(func(tuple.Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) bool) {
	return func(yield func(tuple.Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		next12, stop12 := iter.Pull(s12)
		defer stop12()
		next13, stop13 := iter.Pull(s13)
		defer stop13()
		next14, stop14 := iter.Pull(s14)
		defer stop14()
		next15, stop15 := iter.Pull(s15)
		defer stop15()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			v12, ok := next12()
			if !ok {
				return
			}
			v13, ok := next13()
			if !ok {
				return
			}
			v14, ok := next14()
			if !ok {
				return
			}
			v15, ok := next15()
			if !ok {
				return
			}
			if !yield(tuple.New15(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)) {
				return
			}
		}
	}
}

// Zip16 returns an iterator of 16-tuples.
// The returned iterator have the length of the shortest iterator.
func Zip16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](s1 iter.Seq[T1], s2 iter.Seq[T2], s3 iter.Seq[T3], s4 iter.Seq[T4], s5 iter.Seq[T5], s6 iter.Seq[T6], s7 iter.Seq[T7], s8 iter.Seq[T8], s9 iter.Seq[T9], s10 iter.Seq[T10], s11 iter.Seq[T11], s12 iter.Seq[T12], s13 iter.Seq[T13], s14 iter.Seq[T14], s15 iter.Seq[T15], s16 iter.Seq[T16]) func(func(tuple.Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]) bool) {
	return func(yield func(tuple.Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]) bool) {
		next1, stop1 := iter.Pull(s1)
		defer stop1()
		next2, stop2 := iter.Pull(s2)
		defer stop2()
		next3, stop3 := iter.Pull(s3)
		defer stop3()
		next4, stop4 := iter.Pull(s4)
		defer stop4()
		next5, stop5 := iter.Pull(s5)
		defer stop5()
		next6, stop6 := iter.Pull(s6)
		defer stop6()
		next7, stop7 := iter.Pull(s7)
		defer stop7()
		next8, stop8 := iter.Pull(s8)
		defer stop8()
		next9, stop9 := iter.Pull(s9)
		defer stop9()
		next10, stop10 := iter.Pull(s10)
		defer stop10()
		next11, stop11 := iter.Pull(s11)
		defer stop11()
		next12, stop12 := iter.Pull(s12)
		defer stop12()
		next13, stop13 := iter.Pull(s13)
		defer stop13()
		next14, stop14 := iter.Pull(s14)
		defer stop14()
		next15, stop15 := iter.Pull(s15)
		defer stop15()
		next16, stop16 := iter.Pull(s16)
		defer stop16()
		for {
			v1, ok := next1()
			if !ok {
				return
			}
			v2, ok := next2()
			if !ok {
				return
			}
			v3, ok := next3()
			if !ok {
				return
			}
			v4, ok := next4()
			if !ok {
				return
			}
			v5, ok := next5()
			if !ok {
				return
			}
			v6, ok := next6()
			if !ok {
				return
			}
			v7, ok := next7()
			if !ok {
				return
			}
			v8, ok := next8()
			if !ok {
				return
			}
			v9, ok := next9()
			if !ok {
				return
			}
			v10, ok := next10()
			if !ok {
				return
			}
			v11, ok := next11()
			if !ok {
				return
			}
			v12, ok := next12()
			if !ok {
				return
			}
			v13, ok := next13()
			if !ok {
				return
			}
			v14, ok := next14()
			if !ok {
				return
			}
			v15, ok := next15()
			if !ok {
				return
			}
			v16, ok := next16()
			if !ok {
				return
			}
			if !yield(tuple.New16(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)) {
				return
			}
		}
	}
}
